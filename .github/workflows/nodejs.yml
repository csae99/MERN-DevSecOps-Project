name: Node.js CICD  

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile:
    runs-on: Agent-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'   # adjust version as per your Jenkins setup

      - name: Frontend Compilation (Syntax Check)
        run: |
          cd Application-Code/frontend/
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd Application-Code/backend/
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: Agent-1
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gitleaks Setup
        uses: gitleaks/gitleaks-action@v2

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./Application-Code/frontend/ --exit-code 1
          gitleaks detect --source ./Application-Code/backend/ --exit-code 1

  trivy_fs_scan:
    runs-on: Agent-1
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: Agent-1
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: Application-Code/frontend/        # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=frontend
            -Dsonar.projectName=frontend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: Agent-1
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: Application-Code/backend/           # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=backend
            -Dsonar.projectName=backend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Application-Code/backend/  
          push: true
          tags: shubham554/backend:latest
          file: ./Application-Code/backend/Dockerfile

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Application-Code/frontend/
          push: true
          tags: shubham554/frontend:latest
          file: ./Application-Code/frontend/Dockerfile

  trivy_image_scan:
    runs-on: Agent-1
    needs: build_frontend_docker_image_and_push   # or whatever job built/pushed your image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy image scan for backend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: shubham554/backend:latest
          format: table
          exit-code: '0'                 
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Trivy image scan for frontend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: shubham554/frontend:latest
          format: table
          exit-code: '0'              
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  deploy_to_kubernetes:
    runs-on: Agent-1
    needs: trivy_image_scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Deploy to K8S
      run: |
        kubectl apply -f Kubernetes-Manifests-file/Backend/
        kubectl apply -f Kubernetes-Manifests-file/Database/ 
        kubectl apply -f Kubernetes-Manifests-file/Frontend/
        kubectl apply -f Kubernetes-Manifests-file/ingress.yaml
