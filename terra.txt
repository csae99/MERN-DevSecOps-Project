To create and edit the Terraform setup using the module structure you specified, weâ€™ll need to use **ChatGPT canvas**, which allows collaborative code editing. However, you'll need to **log in to ChatGPT** to access and use that feature.

In the meantime, Iâ€™ll outline the core files right here with best practices as if I were a senior DevOps engineer â€” you can copy them directly into your project.

---

### âœ… Project Structure (as requested)

```
terraform/
â”‚
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ vpc/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â””â”€â”€ outputs.tf
â”‚   â”œâ”€â”€ ec2-instance/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â””â”€â”€ outputs.tf
â”‚
â”œâ”€â”€ main.tf
â”œâ”€â”€ variables.tf
â”œâ”€â”€ outputs.tf
â””â”€â”€ README.md
```

---

### ðŸ”§ `modules/vpc/main.tf`

```hcl
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "${var.name_prefix}-vpc"
  }
}

resource "aws_subnet" "public" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone = var.availability_zone

  tags = {
    Name = "${var.name_prefix}-public-subnet"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "${var.name_prefix}-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "${var.name_prefix}-public-rt"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}
```

---

### ðŸ”§ `modules/vpc/variables.tf`

```hcl
variable "vpc_cidr" {}
variable "public_subnet_cidr" {}
variable "availability_zone" {}
variable "name_prefix" {}
```

---

### ðŸ”§ `modules/vpc/outputs.tf`

```hcl
output "vpc_id" {
  value = aws_vpc.main.id
}

output "subnet_id" {
  value = aws_subnet.public.id
}
```

---

### ðŸ”§ `modules/ec2-instance/main.tf`

```hcl
resource "aws_instance" "this" {
  ami                    = var.ami
  instance_type          = var.instance_type
  subnet_id              = var.subnet_id
  vpc_security_group_ids = [aws_security_group.ec2_sg.id]
  key_name               = var.key_name
  user_data              = var.user_data

  root_block_device {
    volume_size = var.disk_size
    volume_type = "gp3"
  }

  tags = {
    Name = var.instance_name
  }
}

resource "aws_security_group" "ec2_sg" {
  name        = "${var.instance_name}-sg"
  description = "Allow SSH and app ports"
  vpc_id      = var.vpc_id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
```

---

### ðŸ”§ `modules/ec2-instance/variables.tf`

```hcl
variable "ami" {}
variable "instance_type" {}
variable "subnet_id" {}
variable "vpc_id" {}
variable "key_name" {}
variable "user_data" {}
variable "instance_name" {}
variable "disk_size" {
  default = 30
}
```

---

### ðŸ”§ `modules/ec2-instance/outputs.tf`

```hcl
output "public_ip" {
  value = aws_instance.this.public_ip
}
```

---

### ðŸ”§ Root `main.tf`

```hcl
provider "aws" {
  region = "ap-south-1"
}

module "vpc" {
  source              = "./modules/vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidr  = "10.0.1.0/24"
  availability_zone   = "ap-south-1a"
  name_prefix         = "devsecops"
}

module "jenkins_master" {
  source         = "./modules/ec2-instance"
  ami            = var.ami
  instance_type  = "t3a.medium"
  subnet_id      = module.vpc.subnet_id
  vpc_id         = module.vpc.vpc_id
  key_name       = var.key_name
  instance_name  = "jenkins-master"
  user_data      = file("scripts/install_jenkins.sh")
}

module "agent_node" {
  source         = "./modules/ec2-instance"
  ami            = var.ami
  instance_type  = "t3a.large"
  subnet_id      = module.vpc.subnet_id
  vpc_id         = module.vpc.vpc_id
  key_name       = var.key_name
  instance_name  = "agent-node"
  user_data      = file("scripts/install_agent.sh")
}
```

---

### ðŸ”§ Root `variables.tf`

```hcl
variable "ami" {
  default = "ami-0f58b397bc5c1f2e8" # Ubuntu 22.04 in ap-south-1 (example)
}

variable "key_name" {
  default = "your-keypair"
}
```

---

### ðŸ”§ Root `outputs.tf`

```hcl
output "jenkins_master_ip" {
  value = module.jenkins_master.public_ip
}

output "agent_node_ip" {
  value = module.agent_node.public_ip
}
```

---

### ðŸ“„ README.md (Summary)

````md
# Terraform AWS DevSecOps Setup

## Overview

This project sets up:
- Jenkins master (t3a.medium)
- Agent node with Docker, K8s, ArgoCD, Prometheus (t3a.large)
- VPC, subnet, security groups
- EC2 with EBS gp3 volumes

## Usage

```bash
cd terraform
terraform init
terraform apply -var 'key_name=your-keypair'
````

## Files

* `modules/vpc`: VPC + subnet + IGW
* `modules/ec2-instance`: Reusable EC2 setup
* `scripts/install_jenkins.sh`: User data script for Jenkins setup
* `scripts/install_agent.sh`: User data script for Agent setup

```

---

Let me know if you'd like me to generate the `install_jenkins.sh` or `install_agent.sh` scripts next!
```
